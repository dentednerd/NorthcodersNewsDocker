{"ast":null,"code":"var _jsxFileName = \"/Users/joanneimlay/Projects/NCNews-FE/src/components/pages/UserPage.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types'; // import styled from 'styled-components';\n\nimport { connect } from 'react-redux';\nimport * as actions from '../../actions/actions'; // import ArticleText from '../atoms/ArticleText';\n// import CommentList from '../organisms/CommentList';\n// import VoteAndComment from '../organisms/VoteAndComment';\n// import Byline from '../molecules/Byline';\n// const Article = styled.article`\n//   background-color: #fff;\n//   padding: 1rem;\n//   h2, p {\n//     margin: 0;\n//   }\n// `;\n\nclass UserPage extends React.Component {\n  componentDidMount() {\n    this.props.fetchUser(this.props.match.params.user_id);\n  }\n\n  render() {\n    return React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    }, \"User Page\");\n  }\n\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    fetchUser: id => {\n      dispatch(actions.fetchUser(id));\n    }\n  };\n}\n\nfunction MapStateToProps(state) {\n  return {\n    selectedArticle: state.selectedArticle,\n    selectedComments: state.selectedComments\n  };\n}\n\nUserPage.defaultProps = {\n  selectedArticle: {},\n  selectedComments: []\n};\nUserPage.propTypes = {\n  selectedArticle: PropTypes.object,\n  selectedComments: PropTypes.array,\n  fetchArticlesByID: PropTypes.func.isRequired,\n  fetchCommentsByArticleID: PropTypes.func.isRequired,\n  addCommentsByArticleID: PropTypes.func.isRequired,\n  match: PropTypes.object.isRequired\n};\nexport default connect(MapStateToProps, mapDispatchToProps)(UserPage);","map":{"version":3,"sources":["/Users/joanneimlay/Projects/NCNews-FE/src/components/pages/UserPage.js"],"names":["React","PropTypes","connect","actions","UserPage","Component","componentDidMount","props","fetchUser","match","params","user_id","render","mapDispatchToProps","dispatch","id","MapStateToProps","state","selectedArticle","selectedComments","defaultProps","propTypes","object","array","fetchArticlesByID","func","isRequired","fetchCommentsByArticleID","addCommentsByArticleID"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB,C,CACA;;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAO,KAAKC,OAAZ,MAAyB,uBAAzB,C,CACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA,MAAMC,QAAN,SAAuBJ,KAAK,CAACK,SAA7B,CAAuC;AACrCC,EAAAA,iBAAiB,GAAI;AACnB,SAAKC,KAAL,CAAWC,SAAX,CAAqB,KAAKD,KAAL,CAAWE,KAAX,CAAiBC,MAAjB,CAAwBC,OAA7C;AACD;;AAGDC,EAAAA,MAAM,GAAI;AACR,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF;AAGD;;AAVoC;;AAavC,SAASC,kBAAT,CAA6BC,QAA7B,EAAuC;AACrC,SAAO;AACLN,IAAAA,SAAS,EAAGO,EAAD,IAAQ;AACjBD,MAAAA,QAAQ,CAACX,OAAO,CAACK,SAAR,CAAkBO,EAAlB,CAAD,CAAR;AACD;AAHI,GAAP;AAKD;;AAED,SAASC,eAAT,CAA0BC,KAA1B,EAAiC;AAC/B,SAAO;AACLC,IAAAA,eAAe,EAAED,KAAK,CAACC,eADlB;AAELC,IAAAA,gBAAgB,EAAEF,KAAK,CAACE;AAFnB,GAAP;AAID;;AAEDf,QAAQ,CAACgB,YAAT,GAAwB;AACtBF,EAAAA,eAAe,EAAE,EADK;AAEtBC,EAAAA,gBAAgB,EAAE;AAFI,CAAxB;AAKAf,QAAQ,CAACiB,SAAT,GAAqB;AACjBH,EAAAA,eAAe,EAAEjB,SAAS,CAACqB,MADV;AAEjBH,EAAAA,gBAAgB,EAAElB,SAAS,CAACsB,KAFX;AAGjBC,EAAAA,iBAAiB,EAAEvB,SAAS,CAACwB,IAAV,CAAeC,UAHjB;AAIjBC,EAAAA,wBAAwB,EAAE1B,SAAS,CAACwB,IAAV,CAAeC,UAJxB;AAKjBE,EAAAA,sBAAsB,EAAE3B,SAAS,CAACwB,IAAV,CAAeC,UALtB;AAMjBjB,EAAAA,KAAK,EAAER,SAAS,CAACqB,MAAV,CAAiBI;AANP,CAArB;AASA,eAAexB,OAAO,CAACc,eAAD,EAAkBH,kBAAlB,CAAP,CAA8CT,QAA9C,CAAf","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n// import styled from 'styled-components';\nimport { connect } from 'react-redux';\nimport * as actions from '../../actions/actions';\n// import ArticleText from '../atoms/ArticleText';\n// import CommentList from '../organisms/CommentList';\n// import VoteAndComment from '../organisms/VoteAndComment';\n// import Byline from '../molecules/Byline';\n\n// const Article = styled.article`\n//   background-color: #fff;\n//   padding: 1rem;\n\n//   h2, p {\n//     margin: 0;\n//   }\n// `;\n\nclass UserPage extends React.Component {\n  componentDidMount () {\n    this.props.fetchUser(this.props.match.params.user_id);\n  }\n\n\n  render () {\n    return (\n      <h2>User Page</h2>\n    );\n  }\n}\n\nfunction mapDispatchToProps (dispatch) {\n  return {\n    fetchUser: (id) => {\n      dispatch(actions.fetchUser(id));\n    }\n  };\n}\n\nfunction MapStateToProps (state) {\n  return {\n    selectedArticle: state.selectedArticle,\n    selectedComments: state.selectedComments\n  };\n}\n\nUserPage.defaultProps = {\n  selectedArticle: {},\n  selectedComments: []\n}\n\nUserPage.propTypes = {\n    selectedArticle: PropTypes.object,\n    selectedComments: PropTypes.array,\n    fetchArticlesByID: PropTypes.func.isRequired,\n    fetchCommentsByArticleID: PropTypes.func.isRequired,\n    addCommentsByArticleID: PropTypes.func.isRequired,\n    match: PropTypes.object.isRequired\n};\n\nexport default connect(MapStateToProps, mapDispatchToProps) (UserPage);\n"]},"metadata":{},"sourceType":"module"}